With the advancement in computer performance, machine
learning, and digital systems, interest in development of autonomous control systems has increased in a variety of fields from
industrial manufacturing to unmanned space, ground vehicles,
and nuclear reactors. Autonomous control systems are intelligent
systems with self-governance ability to perform and execute control functions in the presence of uncertainty for an extended time
(Antsaklis et al., 1991). The degree of autonomy of an autonomous
control system depends upon the extent to which it can perform
fault diagnosis, planning, forecasting, and decision-making under
uncertainty, without human intervention (Wood et al., 2017).
Owing to the inherent risk and uncertainty associated with the
operation of nuclear reactor systems, the design of autonomous
control systems is a challenging task. Over the past several years,
different techniques have been adopted to develop functions
related to autonomous control and operation of nuclear reactor
systems. Upadhyaya et al. (Upadhyaya et al., 2007) (Na et al.,
2006) developed an autonomous control system for a space reactor
system (Fast spectrum Lithium cooled reactor) with Model Predictive Control (MPC) using a Genetic Algorithm for optimization.
Fault detection in this system is performed using Principal Component analysis. Cetiner et al. (Cetiner et al., 2016) developed a Supervisory Control System (SCS) that uses a probabilistic decisionmaking approach using fault tree and event tree in conjunction with deterministic assessment of plant state variables for autonomous control and maintenance of advanced small modular reactors. Groth et al. (Groth et al., 2014) use dynamic Probabilistic
Risk Analysis (PRA) for fault detection and management, and counterfactual reasoning for decision analysis in a Sodium fast reactor
during earthquake-induced transients. This system is called the
Safely Managing Accidental Reactor Transients (SMART) system.
Lee et al. (Lee et al., 2018) developed an autonomous operation
algorithm for core damage prevention (loss of coolant accident,
Steam generator tube rupture) in a Pressurized Water Reactor. This
work uses a Function-based Hierarchical Framework (FHF) and an
advanced Artificial Intelligence (AI) algorithm like Long
Short-Term Memory (LSTM) for plant state diagnosis and control.
All the autonomous control systems discussed here perform
diagnosis and decision-making for fault management and control.
In the case of the SCS and SMART systems, a strategic decision
analysis is performed based on the consequence of decision choices
while in the case of the space reactor system and FHF, decision
making is implicitly performed based on some preset decision
preferences.



In this study, a Nearly Autonomous Management and Control
(NAMAC) system is designed to provide recommendations to the
operator for maintaining the safety and performance of the reactor.
The development of the NAMAC system is based on three
elements:
- Knowledge base – a class of databases, scenarios, and models to
support the control and risk management of the reactor;
- Digital Twin (DT) – a knowledge acquisition system to support
different NAMAC functions (i.e., diagnosis, strategy planning,
prognosis, strategy assessment, etc.);
- Operational workflow – an assembly of DTs to support operator’s decision-making or to make direct operational
recommendations.
Comparing to the reviewed intelligent systems, NAMAC is a
computerized safety case that aims to achieve an alignment of
NPP safety design, analysis, operator training, and emergency management by furnishing recommendations to operators for effective
actions that will achieve particular goals, based on the NAMAC’s
knowledge of the current plant state, prediction of the future state
transients, and reflecting the uncertainties that complicate the
determination of mitigating strategies. Such knowledge is
extracted from the knowledge base by machine-learning algorithms and stored in DTs of various functions. Although this is
not the first time machine learning algorithms or DTs are used in
the autonomous control system, this is the first time that these
tools are implemented and combined in a system with a structured
workflow in order to promote rigor, comprehensiveness, and realism in safety cases. Moreover, NAMAC system recognizes the
importance of explainability by deriving recommendation from
an intelligible technical basis. This includes an argument-based
operational workflow, operating procedures and reactor technical
specifications in the knowledge base, and a modular NAMAC architecture with DTs of different autonomous functions. Key DTs in
NAMAC include:
- Diagnosis – Monitors safety significant factor(s) based on
observed sensor data;
- Strategy inventory – Identifies feasible control options based on
plant state diagnosis, safety and control limits;
- Prognosis – Forecasts plant state for each control option;
- Strategy assessment – Ranks the control options based on the
consequence and user defined preference structure related to
safety, operability and/or performance of the reactor.

To evaluate and demonstrate the capability of DTs and the
NAMAC system, a case study is designed for the control of Experimental Breeder Reactor – II (EBR-II) during a single Loss Of Flow
Accident (LOFA). To further evaluate the scalability and uncertainty
of DTs and NAMAC, test cases are designed with different sources
of uncertainty. For DTs tests, sources include input data, model fits,
scope compliance, etc., while for NAMAC tests, accident scenarios
lying outside the training domain are used. To avoid severe consequences due to NAMAC uncertainty, a global discrepancy checker
is implemented to determine if the plant is moving towards the
expected system state after the control actions are injected. If the
discrepancy between expected and observed states exceed a limit,
an anomaly is claimed, and the operator is alerted. Meanwhile, a
safety-oriented control action, i.e. SCRAM, is recommended.
The organization of the paper is as follows. Section 2 describes
the concepts of three-layer hierarchical NAMAC development process, DT technology and its implementation in NAMAC, plant simulator model, data generation engine, and NAMAC operational
workflow. Section 3 presents a case study where NAMAC is controlling the simulator of EBR-II during a single LOFA based on DT
implementations and operational workflows. Moreover, tests are
performed to evaluate the uncertainty of DTs and NAMAC systems
with different sources of uncertainty. Section 4 presents conclusions of this study.


2. Nearly autonomous management and control (NAMAC)
system and design
This section describes the NAMAC architecture, the development of the DTs, and the construction of the knowledge base.
The first part of this section illustrates the three-layer NAMAC
architecture, including knowledge base, DT development process
(for different NAMAC functions), and NAMAC operational workflow. The second part of this section illustrates the concept of
DTs and how they are implemented in the NAMAC system. The
third part of this section describes the GOTHIC plant simulator
and data generation engine. The fourth part of this section
describes the NAMAC operational workflow based on the assembly
of different DTs.
2.1. NAMAC architecture
The development process of NAMAC can be demonstrated by
the three-layer architecture (see Fig. 1). The three layers are: (i)
Knowledge base, (ii) NAMAC developmental layer, and (iii) NAMAC
operational layer.
The first layer focuses on development of the knowledge base.
The knowledge base serves as the foundations to the whole
scheme, and the upper layers store or make use of partial information from the knowledge base. The knowledge base for NAMAC
development can be classified into three components: (i) issue
space, (ii) simulation tool, and (iii) data repository. Issue space
defines the scenario in mathematical formulations. The simulation
tool (system code with adequate fidelity) is required for generating
training/testing data set for the development of different DTs. In
this work, we employ GOTHIC (EPRI, 2018) for system level simulations and RAVEN (Alfonsi et al., 2020) as the sampling tool. Data
repository has two elements: knowledge element and data element. Knowledge element consists of literature or information
related to operating procedures and training materials, system
configuration, initial conditions, reactor failure modes, experimental data, benchmarking results, etc. Data element consists of data
generated by the simulation tool for development of NAMAC DTs
and plant data collected from operational histories, transients,
and events.

The second layer focuses on the development and implementation (training and testing) of NAMAC DTs. These DTs can be treated
as surrogate models for specific sets of information and knowledge
from the knowledge base. For example, Digital Twin for Diagnosis
(DT-D) aims to monitor the unmeasurable and unobservable state
variables by storing correlation and dependencies among different
state variables; Digital Twin for Prognosis (DT-P) is used to predict
the short-term transient and the consequences of control actions
by storing the time-propagation of state variables with respect to
reference information, including initial conditions, control actions,
histories, etc. More details about DTs training and testing are discussed in Section 2.2.
Once DTs are implemented, they are fed to the third layer
and assembled based on the operational workflow. Since NAMAC
aims to support operators’ decision-making by making recommendations, a logic scheme is needed to support the final recommendation based on real-time observations and records by
DTs. For example, NAMAC needs to figure out the complete
states of the reactor by monitoring the unobservable state variables with DT-D; NAMAC also needs to understand the consequences of control actions by predicting the short-term
transient of state variables with DT-P. More details about the
design and implementation of NAMAC operational workflow is
discussed in Section 2.5. The operational layer also aims to test
the performance of NAMAC by coupling the system with a
nuclear reactor or a plant simulator.
The NAMAC structure discussed here is highly modular. We
believe that this has important advantages in scalability and interpretability, which will become more important when a much
broader issue space is considered. Moreover, the modular architecture allows for a plug-and-play character such that NAMAC can be
more adaptive to different reactor designs, instrument and control
system, hardware platform, etc.
