
2. Nearly autonomous management and control (NAMAC)
system and design
This section describes the NAMAC architecture, the development of the DTs, and the construction of the knowledge base.
The first part of this section illustrates the three-layer NAMAC
architecture, including knowledge base, DT development process
(for different NAMAC functions), and NAMAC operational workflow. The second part of this section illustrates the concept of
DTs and how they are implemented in the NAMAC system. The
third part of this section describes the GOTHIC plant simulator
and data generation engine. The fourth part of this section
describes the NAMAC operational workflow based on the assembly
of different DTs.
2.1. NAMAC architecture
The development process of NAMAC can be demonstrated by
the three-layer architecture (see Fig. 1). The three layers are: (i)
Knowledge base, (ii) NAMAC developmental layer, and (iii) NAMAC
operational layer.
The first layer focuses on development of the knowledge base.
The knowledge base serves as the foundations to the whole
scheme, and the upper layers store or make use of partial information from the knowledge base. The knowledge base for NAMAC
development can be classified into three components: (i) issue
space, (ii) simulation tool, and (iii) data repository. Issue space
defines the scenario in mathematical formulations. The simulation
tool (system code with adequate fidelity) is required for generating
training/testing data set for the development of different DTs. In
this work, we employ GOTHIC (EPRI, 2018) for system level simulations and RAVEN (Alfonsi et al., 2020) as the sampling tool. Data
repository has two elements: knowledge element and data element. Knowledge element consists of literature or information
related to operating procedures and training materials, system
configuration, initial conditions, reactor failure modes, experimental data, benchmarking results, etc. Data element consists of data
generated by the simulation tool for development of NAMAC DTs
and plant data collected from operational histories, transients,
and events.

The second layer focuses on the development and implementation (training and testing) of NAMAC DTs. These DTs can be treated
as surrogate models for specific sets of information and knowledge
from the knowledge base. For example, Digital Twin for Diagnosis
(DT-D) aims to monitor the unmeasurable and unobservable state
variables by storing correlation and dependencies among different
state variables; Digital Twin for Prognosis (DT-P) is used to predict
the short-term transient and the consequences of control actions
by storing the time-propagation of state variables with respect to
reference information, including initial conditions, control actions,
histories, etc. More details about DTs training and testing are discussed in Section 2.2.
Once DTs are implemented, they are fed to the third layer
and assembled based on the operational workflow. Since NAMAC
aims to support operatorsâ€™ decision-making by making recommendations, a logic scheme is needed to support the final recommendation based on real-time observations and records by
DTs. For example, NAMAC needs to figure out the complete
states of the reactor by monitoring the unobservable state variables with DT-D; NAMAC also needs to understand the consequences of control actions by predicting the short-term
transient of state variables with DT-P. More details about the
design and implementation of NAMAC operational workflow is
discussed in Section 2.5. The operational layer also aims to test
the performance of NAMAC by coupling the system with a
nuclear reactor or a plant simulator.
The NAMAC structure discussed here is highly modular. We
believe that this has important advantages in scalability and interpretability, which will become more important when a much
broader issue space is considered. Moreover, the modular architecture allows for a plug-and-play character such that NAMAC can be
more adaptive to different reactor designs, instrument and control
system, hardware platform, etc.